//
// Generated file, do not edit! Created by opp_msgtool 6.0 from transportlayer/bbr/SkbInfo.msg.
//

#ifndef __INET_SKBINFO_M_H
#define __INET_SKBINFO_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif


namespace inet {

class SkbInfo;

}  // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/TagBase_m.h" // import inet.common.TagBase

#include "inet/common/Units_m.h" // import inet.common.Units


namespace inet {

/**
 * Class generated from <tt>transportlayer/bbr/SkbInfo.msg:23</tt> by opp_msgtool.
 * <pre>
 * class SkbInfo extends TagBase
 * {
 *     uint32_t delivered;
 *     simtime_t firstSent;
 *     simtime_t lastSent;
 *     simtime_t deliveredTime;
 *     uint32_t payloadBytes;
 * }
 * </pre>
 */
class SkbInfo : public ::inet::TagBase
{
  protected:
    uint32_t delivered = 0;
    ::omnetpp::simtime_t firstSent = SIMTIME_ZERO;
    ::omnetpp::simtime_t lastSent = SIMTIME_ZERO;
    ::omnetpp::simtime_t deliveredTime = SIMTIME_ZERO;
    uint32_t payloadBytes = 0;

  private:
    void copy(const SkbInfo& other);

  protected:
    bool operator==(const SkbInfo&) = delete;

  public:
    SkbInfo();
    SkbInfo(const SkbInfo& other);
    virtual ~SkbInfo();
    SkbInfo& operator=(const SkbInfo& other);
    virtual SkbInfo *dup() const override {return new SkbInfo(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual uint32_t getDelivered() const;
    virtual void setDelivered(uint32_t delivered);

    virtual ::omnetpp::simtime_t getFirstSent() const;
    virtual void setFirstSent(::omnetpp::simtime_t firstSent);

    virtual ::omnetpp::simtime_t getLastSent() const;
    virtual void setLastSent(::omnetpp::simtime_t lastSent);

    virtual ::omnetpp::simtime_t getDeliveredTime() const;
    virtual void setDeliveredTime(::omnetpp::simtime_t deliveredTime);

    virtual uint32_t getPayloadBytes() const;
    virtual void setPayloadBytes(uint32_t payloadBytes);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const SkbInfo& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, SkbInfo& obj) {obj.parsimUnpack(b);}


}  // namespace inet


namespace omnetpp {

template<> inline inet::SkbInfo *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::SkbInfo*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __INET_SKBINFO_M_H

