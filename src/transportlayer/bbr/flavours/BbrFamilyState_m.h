//
// Generated file, do not edit! Created by opp_msgtool 6.0 from transportlayer/bbr/flavours/BbrFamilyState.msg.
//

#ifndef __INET__TCP_BBRFAMILYSTATE_M_H
#define __INET__TCP_BBRFAMILYSTATE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif


namespace inet {
namespace tcp {

struct BbrFamilyStateVariables;

}  // namespace tcp
}  // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/transportlayer/tcp/flavours/TcpTahoeRenoFamilyState_m.h" // import inet.transportlayer.tcp.flavours.TcpTahoeRenoFamilyState


namespace inet {
namespace tcp {

/**
 * Struct generated from transportlayer/bbr/flavours/BbrFamilyState.msg:17 by opp_msgtool.
 */
struct BbrFamilyStateVariables : ::inet::tcp::TcpTahoeRenoFamilyStateVariables
{
    BbrFamilyStateVariables();
    uint32_t lastUpdateSeq = 0;
    double R = 0;
    int rttCount = 0;
    double firstSentTime = 0;
    double deliveredTime = 0;
    long m_delivered = 0;
    bool isAppLimited = false;
    uint32_t m_bandwidthWindowLength = 10;
    ::omnetpp::simtime_t connMinRtt = SIMTIME_MAX;
    ::omnetpp::simtime_t m_lastRtt = 0;
    uint32_t m_nextRoundDelivered = 0;
    uint32_t m_roundCount = 0;
    bool m_roundStart = false;
    bool m_packetConservation = false;
    ::omnetpp::simtime_t m_cycleStamp = 0;
    uint32_t m_cycleIndex = 0;
    bool m_minRttExpired = false;
    double m_pacingGain = 0;
    double m_cWndGain = 0;
    double m_highGain = 2.89;
    ::omnetpp::simtime_t m_minRtt = SIMTIME_MAX;
    ::omnetpp::simtime_t m_minRttStamp = 0;
    ::omnetpp::simtime_t m_minRttFilterLen = SimTime(10);
    uint32_t m_sendQuantum = 0;
    bool m_isPipeFilled = false;
    uint32_t m_fullBandwidth = 0;
    uint32_t m_fullBandwidthCount = 0;
    bool m_idleRestart = false;
    ::omnetpp::simtime_t m_probeRttDuration = SimTime(0.2);
    ::omnetpp::simtime_t m_probeRttDoneStamp = 0;
    bool m_probeRttRoundDone = false;
    bool m_appLimited = false;
    uint32_t m_minPipeCwnd = 0;
    uint32_t m_priorCwnd = 0;
    bool m_hasSeenRtt = false;
    double m_pacingMargin = 0.01;
    uint32_t m_initialCWnd = 0;
    uint32_t m_targetCWnd = 0;
    bool m_isInitialized = false;
    uint32_t m_extraAckedGain = 1;
    uint32_t m_extraAckedWinRtt = 0;
    uint32_t m_extraAckedWinRttLength = 5;
    uint32_t m_extraAckedIdx = 0;
    ::omnetpp::simtime_t m_ackEpochTime = 0;
    uint32_t m_ackEpochAckedResetThresh = 1 << 12;
    uint32_t m_ackEpochAcked = 0;
    uint32_t m_segmentSize = 1480;

  public:
    virtual std::string str() const override;
    virtual std::string detailedInfo() const override;
};

// helpers for local use
void __doPacking(omnetpp::cCommBuffer *b, const BbrFamilyStateVariables& a);
void __doUnpacking(omnetpp::cCommBuffer *b, BbrFamilyStateVariables& a);

inline void doParsimPacking(omnetpp::cCommBuffer *b, const BbrFamilyStateVariables& obj) { __doPacking(b, obj); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, BbrFamilyStateVariables& obj) { __doUnpacking(b, obj); }


}  // namespace tcp
}  // namespace inet


namespace omnetpp {

template<> inet::tcp::BbrFamilyStateVariables *fromAnyPtr(any_ptr ptr);

}  // namespace omnetpp

#endif // ifndef __INET__TCP_BBRFAMILYSTATE_M_H

